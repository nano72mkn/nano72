---
const navItems = [
  { href: '/about', label: 'About' },
  { href: '/apps', label: 'Apps' },
  { href: '/contact', label: 'Contact' },
];

const currentPath = Astro.url.pathname;
---

<header id="header" class="fixed top-0 left-0 right-0 z-50 transition-all duration-300">
  <div id="header-inner" class="max-w-container mx-auto transition-all duration-300 border-b border-border/20">
    <nav class="flex items-center justify-between h-16 px-6">
      <!-- ロゴ -->
      <a href="/" class="flex items-center gap-3 group">
        <img 
          src="/logo.png" 
          alt="nano72" 
          class="h-10 w-auto transition-transform duration-300 group-hover:scale-105"
        />
        <span class="text-lg font-display font-medium text-text-primary group-hover:text-accent transition-colors duration-300">
          ナノナツ
        </span>
      </a>
      
      <!-- デスクトップナビゲーション -->
      <ul class="hidden md:flex items-center space-x-8">
        {navItems.map(item => (
          <li>
            <a 
              href={item.href} 
              class={`
                text-sm font-medium text-text-secondary 
                hover:text-accent transition-colors duration-300
                relative py-2
                ${currentPath === item.href ? 'text-accent' : ''}
              `}
            >
              {item.label}
              {currentPath === item.href && (
                <span class="absolute bottom-0 left-0 right-0 h-0.5 bg-accent"></span>
              )}
            </a>
          </li>
        ))}
      </ul>
      
      <!-- モバイルメニューボタン -->
      <button 
        class="md:hidden p-2 text-text-primary"
        id="mobile-menu-toggle"
        aria-label="メニューを開く"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </nav>
  </div>
  
  <!-- モバイルメニュー -->
  <div 
    class="md:hidden fixed inset-0 bg-base transform translate-x-full transition-transform duration-300"
    id="mobile-menu"
  >
    <div class="flex flex-col h-full pt-20 px-6">
      <button 
        class="absolute top-6 right-6 p-2"
        id="mobile-menu-close"
        aria-label="メニューを閉じる"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
      
      <ul class="flex flex-col space-y-6 mt-8">
        {navItems.map(item => (
          <li>
            <a 
              href={item.href} 
              class={`
                block text-lg font-medium transition-colors duration-300
                ${currentPath === item.href ? 'text-accent' : 'text-text-primary hover:text-accent'}
              `}
            >
              {item.label}
            </a>
          </li>
        ))}
      </ul>
    </div>
  </div>
</header>

<!-- スペーサー -->
<div class="h-16"></div>

<style>
  #mobile-menu.active {
    transform: translateX(0);
  }
</style>

<script>
  const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
  const mobileMenuClose = document.getElementById('mobile-menu-close');
  const mobileMenu = document.getElementById('mobile-menu');
  const menuLinks = mobileMenu?.querySelectorAll('a');
  
  mobileMenuToggle?.addEventListener('click', () => {
    mobileMenu?.classList.add('active');
    document.body.style.overflow = 'hidden';
  });
  
  mobileMenuClose?.addEventListener('click', () => {
    mobileMenu?.classList.remove('active');
    document.body.style.overflow = '';
  });
  
  menuLinks?.forEach(link => {
    link.addEventListener('click', () => {
      mobileMenu?.classList.remove('active');
      document.body.style.overflow = '';
    });
  });
  
  // スクロール時のヘッダー浮遊効果
  const header = document.getElementById('header');
  const headerInner = document.getElementById('header-inner');
  let lastScrollY = 0;
  
  function updateHeader() {
    const scrollY = window.scrollY;
    
    if (scrollY > 100) {
      // スクロール時：浮いたスタイル
      header?.classList.add('top-4', 'px-4', 'md:px-6');
      header?.classList.remove('top-0');
      headerInner?.classList.add('rounded-full', 'shadow-lg', 'border', 'border-border/50', 'bg-base/90', 'backdrop-blur-md');
      headerInner?.classList.remove('border-b', 'border-border/20');
    } else {
      // 初期状態：通常のスタイル
      header?.classList.remove('top-4', 'px-4', 'md:px-6');
      header?.classList.add('top-0');
      headerInner?.classList.remove('rounded-full', 'shadow-lg', 'border', 'border-border/50', 'bg-base/90', 'backdrop-blur-md');
      headerInner?.classList.add('border-b', 'border-border/20');
    }
    
    lastScrollY = scrollY;
  }
  
  // スクロールイベントの監視
  window.addEventListener('scroll', updateHeader);
  // 初期状態の設定
  updateHeader();
</script>